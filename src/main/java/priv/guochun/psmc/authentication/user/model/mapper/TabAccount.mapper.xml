<?xml version="1.0" encoding="UTF-8" ?>  
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//  
EN" "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">
<mapper namespace="priv.guochun.psmc.authentication.user.model.TabAccount">  
   
    
   	<select id="getTabAccountByCondition" resultType="java.util.Map" parameterType="hashmap">
   			SELECT A.UUID,ACCOUNT_NAME,ACCOUNT_PASS,IS_LOCKED,A.is_auth,A.auth_type,A.account_type,C.GROUP_CODE AS GROUPID,C.GROUP_NAME FROM TAB_ACCOUNTS A,TAB_PERSON B,TAB_GROUP C WHERE A.uuid=B.acc_uuid
   			AND b.GROUPID = C.group_code
   				<if test="uuid !=null">
   					and A.UUID = #{uuid}
   				</if>
   				<if test="accountName !=null">
   					and ACCOUNT_NAME = #{accountName}
   				</if>
   				<if test="accountPass !=null">
   					and account_pass = #{accountPass}
   				</if>
   				<if test="telephone !=null">
   					AND B.telephone= #{telephone}
   				</if>
   				<if test="accountType !=null">
   					and account_type = #{accountType}
   				</if>
   	</select>
  	
  	<select id="accountUniqueValidate" resultType="java.util.Map" parameterType="hashmap">
   			SELECT UUID,ACCOUNT_NAME,ACCOUNT_PASS,IS_LOCKED,is_auth,auth_type FROM TAB_ACCOUNTS 
   			<where>
   				<if test="accountUuid !=null">
   					and UUID != #{accountUuid}
   				</if>
   				<if test="username !=null">
   					and ACCOUNT_NAME = #{username}
   				</if>
   			</where>
   	</select>
  

   	<select id="getMyPageOfTabAccounts" resultType="java.util.Map" parameterType="hashmap">
	  select a.uuid as ACC_UUID,a.ACCOUNT_NAME,a.ACCOUNT_PASS,a.IS_LOCKED,a.is_auth,a.auth_type, j.DICT_NAME AS ISLOCKEDNAME, h.DICT_NAME AS AUTHTYPENAME,
		b.uuid as PERSON_ID,b.PERSON_NAME,b.SEX,b.AGE,b.TELEPHONE,b.EMAIL,c.dict_name as SEXNAME,e.DICT_NAME as ACCOUNT_TYPE_NAME,
    		d.group_code as GROUP_CODE,d.group_name as GROUP_NAME,b.id_card,b.area,g.role_name as ROLE_NAME
    		from tab_accounts a left join tab_data_dict e on a.account_type=e.dict_id and e.dict_no= 'ACC_TYPE'
				left join tab_data_dict h on a.AUTH_TYPE=h.dict_id and h.dict_no= 'PERSON_AUTH_TYPE'
				left join tab_data_dict j on a.IS_LOCKED=j.dict_id and j.dict_no= 'IF',
                  tab_person b left join tab_data_dict c on b.sex=c.dict_id and c.DICT_NO= 'SEX',
                  tab_group d,tab_acc_role f,tab_role g
    		where a.uuid=b.acc_uuid  and b.groupid=d.group_code
    		      and a.uuid=f.acc_uuid and f.role_uuid=g.uuid
    		<if test="accountName !=null and accountName !=''">
   					and a.ACCOUNT_NAME like concat(concat('%',#{accountName}),'%')
   			</if>
			<if test="accountNames !=null and accountNames !=''">
				${accountNames}
			</if>
			<if test = "flowRoleOrGroupIds !=null">
				${flowRoleOrGroupIds}
			</if>
 			<if test="personName !=null and personName !=''">
 					and b.PERSON_NAME like concat(concat('%',#{personName}),'%')
 			</if>
 			<if test="isLocked !=null and isLocked !=''">
 					and a.IS_LOCKED = #{isLocked}
 			</if>
 			<if test="accountType !=null and accountType !=''">
 					and a.account_type = #{accountType}
 			</if>
 			<if test="telephone !=null and telephone !=''">
 					and b.TELEPHONE like concat(concat('%',#{telephone}),'%')
 			</if>
 			<if test="groupName !=null and groupName !=''">
 					and d.group_name like concat(concat('%',#{groupName}),'%')
 			</if>
   	</select>
 
  	
  	<insert id="insertAccount">
  		INSERT INTO TAB_ACCOUNTS(UUID,ACCOUNT_NAME,ACCOUNT_PASS,IS_LOCKED,ACCOUNT_TYPE,is_auth,auth_type) VALUES
  		(#{uuid},#{accountName},#{accountPass},#{isLocked},#{accountType},#{isAuth},#{authType})
  	</insert>
  	
  	<update id="updateAccount" parameterType="priv.guochun.psmc.authentication.user.model.TabAccount">
  		UPDATE TAB_ACCOUNTS 
  		<trim prefix="set" suffixOverrides=",">
	  		<if test="accountName != null">
	  			ACCOUNT_NAME =#{accountName},
	  		</if>
	  		<if test="accountPass != null">
	  			ACCOUNT_PASS =#{accountPass},
	  		</if>
	  		<if test="isLocked != null">
	  			IS_LOCKED =#{isLocked},
	  		</if>
	  		<if test="accountType != null">
	  			ACCOUNT_TYPE =#{accountType},
	  		</if>
	  		<if test="isAuth != null">
	  			is_auth = #{isAuth},
	  		</if>
	  		<if test="authType != null">
	  			auth_type = #{authType},
	  		</if>
  		</trim>
  		where UUID=#{uuid}
  	</update>
  	
  	
    <delete id="deletesAccounts" parameterType="hashmap">
    	DELETE FROM  TAB_ACCOUNTS where 1=1  and UUID in
    	<foreach item="item" index="index" collection="ids" open="(" separator="," close=")">
				  #{item}  
		</foreach>  
    </delete>
  
   	
</mapper>  