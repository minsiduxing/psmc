<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd"
	default-lazy-init="false">
	<!--
		1.秒（0~59）2.分钟（0~59）3.小时（0~23）4.天（月）（0~31，但是你需要考虑你月的天数）5.月（0~11）
		6.天（星期）（1~7 1=SUN 或 SUN，MON，TUE，WED，THU，FRI，SAT）7.年份（1970－2099）
		通配符说明:
		*表示所有值. 例如:在分的字段上设置 "*",表示每一分钟都会触发。
		? 表示不指定值。使用的场景为不需要关心当前设置这个字段的值。例如:要在每月的10号触发一个操作，但不关心是周几，
		所以需要周位置的那个字段设置为"?" 具体设置为 0 0 0 10 * ?- 表示区间。例如 在小时上设置 "10-12",表示 10,11,12点都会触发。,
		 表示指定多个值，例如在周字段上设置 "MON,WED,FRI" 表示周一，周三和周五触发/用于递增触发。如在秒上面设置"5/15" 表示从5秒开始，
		 每增15秒触发(5,20,35,50)。 在月字段上设置'1/3'所示每月1号开始，每隔三天触发一次。L 表示最后的意思。在日字段设置上，
		 表示当月的最后一天(依据当前月份，如果是二月还会依据是否是润年[leap]), 在周字段上表示星期六，相当于"7"或"SAT"。
		 如果在"L"前加上数字，则表示该数据的最后一个。例如在周字段上设置"6L"这样的格式,则表示“本月最后一个星期五" 
		 W 表示离指定日期的最近那个工作日(周一至周五). 例如在日字段上设置"15W"，表示离每月15号最近的那个工作日触发。
		 如果15号正好是周六，则找最近的周五(14号)触发, 如果15号是周未，则找最近的下周一(16号)触发.如果15号正好在工作日(周一至周五)，
		 则就在该天触发。如果指定格式为 "1W",它则表示每月1号往后最近的工作日触发。如果1号正是周六，则将在3号下周一触发。
		 (注，"W"前只能设置具体的数字,不允许区间"-").# 序号(表示每月的第几个周几)，例如在周字段上设置"6#3"表示在每月的第三个周六.注意如果
		 指定"#5",正好第五周没有周六，则不会触发该配置(用在母亲节和父亲节再合适不过了) ；小提示：'L'和 'W'可以一组合使用。如果在日字段上
		 设置"LW",则表示在本月的最后一个工作日触发；周字段的设置，若使用英文字母是不区分大小写的，即MON与mon相同
	-->

	<!-- 缓存调度任务 -->
	
	<bean id="cacheJobDetail"  
	    class="org.springframework.scheduling.quartz.JobDetailFactoryBean">  
	    <property name="jobClass">  
	        <value>priv.guochun.psmc.system.framework.cache.InitCacheTask</value>  
	    </property>  
	    <property name="name" value="cacheJobDetail"></property>  
	    <property name="durability" value="true" />  
	</bean>   
	
	
	<!-- 缓存调度任务执行频率 -->
	<bean id="cacheJobTaskTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
	 <property name="jobDetail" ref="cacheJobDetail" />
	 <!--每天-->
	<property name="cronExpression" value="0 0 0 * * ?" />
	</bean>
	
	<!-- 设置调度 -->
	 <bean id="quartzScheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
	 <property name="quartzProperties">  
	 <props>  
        <prop key="org.quartz.scheduler.instanceName">quartzScheduler</prop>  
        <prop key="org.quartz.scheduler.instanceId">AUTO</prop>  
    
        <prop key="org.quartz.threadPool.class">org.quartz.simpl.SimpleThreadPool</prop>  
        <prop key="org.quartz.threadPool.threadCount">10</prop>  
        <prop key="org.quartz.threadPool.threadPriority">5</prop>  
      
        <prop key="org.quartz.jobStore.class">org.quartz.impl.jdbcjobstore.JobStoreTX</prop>  
        <prop key="org.quartz.jobStore.tablePrefix">QRTZ_</prop>  
        <prop key="org.quartz.jobStore.driverDelegateClass">org.quartz.impl.jdbcjobstore.StdJDBCDelegate</prop>
        <prop key="org.quartz.jobStore.txIsolationLevelSerializable">true</prop>
        <prop key="org.quartz.jobStore.misfireThreshold">120000</prop>  
        
     
        <prop key="org.quartz.jobStore.isClustered">false</prop>  
        <prop key="org.quartz.jobStore.clusterCheckinInterval">10000</prop>  
        <prop key="org.quartz.jobStore.maxMisfiresToHandleAtATime">1</prop>  
       
<!--        <prop key="org.quartz.jobStore.dataSource">dataSource</prop>-->
<!--        <prop key="org.quartz.dataSource.myDS.driver">${jdbc_driverClass}</prop>-->
<!--        <prop key="org.quartz.dataSource.myDS.URL">${jdbc_jdbcUrl}</prop>-->
<!--        <prop key="org.quartz.dataSource.myDS.user">${jdbc_username}</prop>-->
<!--        <prop key="org.quartz.dataSource.myDS.password">${jdbc_password}</prop>-->
<!--        <prop key="org.quartz.dataSource.myDS.maxConnections">10</prop>-->
        
    </props>  
	</property>
	<property name="dataSource" ref="dataSource"/>
	<property name="schedulerName" value="CRMscheduler" />  
    <!--必须的，QuartzScheduler 延时启动，应用启动完后 QuartzScheduler 再启动-->  
    <property name="startupDelay" value="5"/>  
    <property name="applicationContextSchedulerContextKey" value="applicationContextKey" />
    <!--可选，QuartzScheduler 启动时更新己存在的Job，这样就不用每次修改targetObject后删除qrtz_job_details表对应记录了 -->  
    <property name="overwriteExistingJobs" value="true" />  
    <!-- 设置自动启动 -->  
    <property name="autoStartup" value="true" />  
	 <property name="triggers">
	  <list>
	   <ref bean="logOperCronTrigger"/>
	   <ref bean="cacheJobTaskTrigger"/>
	   <ref bean="lisenceCronTrigger"/>
	  </list>
	 </property>
	 <property name="taskExecutor" ref="executor" />
	</bean> 
	
</beans>
